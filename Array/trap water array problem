//Given an array arr[] of N non-negative integers representing the height of blocks. If width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. 
/*Input:
N = 4
arr[] = {7,4,0,9}
Output:
10
Explanation:
Water trapped by above 
block of height 4 is 3 units and above 
block of height 0 is 7 units. So, the 
total unit of water trapped is 10 units.*/
#include<bits/stdc++.h>
using namespace std;
int trapwater(int arr[],int n)
{
	int res=0;
	int lmax[n];
	int rmax[n];
	lmax[0]=arr[0];
	for(int i=1;i<n;i++)
	{
		lmax[i]=max(lmax[i-1],arr[i]);
	}
	rmax[n-1]=arr[n-1];
	for(int j=n-2;j>0;j--)
	{
		rmax[j]=max(rmax[j+1],arr[j]);
	}
	for(int k = 0;k<n;k++)
	{
		res = res+(min(lmax[k],rmax[k])-arr[k]);
	}
	return res;
}
int main()
{
	int arr[]= {5,0,6,2,3};
	int n = sizeof(arr)/sizeof(arr[0]);
	cout<<trapwater(arr,n);
}
