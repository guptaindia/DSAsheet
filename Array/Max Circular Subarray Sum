//Given an array arr[] of N integers arranged in a circular fashion. Your task is to find the maximum contiguous subarray sum.
#include<iostream>
using namespace std;
int normalmaxsum(int arr[],int n)//standard kadane
{
	  int res = arr[0];
	  int maxending = arr[0];
	  for(int i = 1;i<n;i++)
	  {
	  	maxending = max(arr[i],maxending+arr[i]);
	  	res = max(res,maxending);
	  }
	  return res;
}
int overalmaxsum(int arr[],int n)
{
	int maxnormal = normalmaxsum(arr,n);//normal sum
	if(maxnormal<0)
	{
		return maxnormal;
	}
	int arrsum = 0;
	for(int i = 0;i<n;i++)//circular sum
	{
		arrsum+=arr[i];
		arr[i]=-arr[i];
	}
	int maxcircular = arrsum + normalmaxsum(arr,n);
	return (max(maxnormal,maxcircular));
}
int main()
{	int arr[] = {8,-4,3,-5,4};
	int n = sizeof(arr)/sizeof(arr[0]);
	cout<<overalmaxsum(arr,n);
}
